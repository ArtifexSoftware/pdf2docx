# Run test when triggering the workflow on push and pull request, 
# but only for the master branch

name: test

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master


# Run test for any valid triggers
# - convert pdf to docx
# - convert generated docx to pdf for further quality checking
# - check converting quality

jobs:

  pdf2docx:

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov codecov
          python setup.py develop

      - name: Run unit test
        run: |
          pytest -v ./test/test.py::TestConversion --cov=./pdf2docx --cov-report=xml

      - name: Upload coverage reports to Codecov
        run: |
          codecov
        env: # Or as an environment variable
          super_secret: ${{ secrets.CODECOV_TOKEN }}
      
      # upload docx for further job
      - name: Archive package
        uses: actions/upload-artifact@v2
        with:
            name: outputs
            path: ./test/outputs
  

  docx2pdf:
    # a specific runner with MS Word installed
    runs-on: self-hosted

    needs: pdf2docx

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # download artifacts from depending job
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: outputs
          path: test\outputs

      # convert docx to pdf with OfficeToPDF
      - name: Convert to PDF
        run: |
          cd test\outputs
          for /r %i in (*) do @OfficeToPDF %i
          del *.docx
      
      # upload pdf for further job
      - name: Archive package
        uses: actions/upload-artifact@v2
        with:
            name: outputs
            path: test\outputs


  check_quality:

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    needs: docx2pdf

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      
      # download artifacts from depending job
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: outputs
          path: ./test/outputs

      - name: Set up Python 3.x
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          python setup.py develop

      - name: Check converting quality
        run: |
          pytest -v ./test/test.py::TestQuality